The prime factorization utility is a command-line tool designed to find and display the prime factors of any given positive integer. Its primary purpose is to provide a quick and efficient way for users to decompose numbers into their prime components.

Key goals and requirements:
1. Accept a single positive integer as input via command-line argument
2. Calculate the prime factorization of the input number
3. Display the prime factors in ascending order, with repetition for multiple occurrences
4. Implement efficient algorithms for prime factorization
5. Handle large numbers within reasonable time constraints
6. Provide clear error messages for invalid inputs
7. Ensure the utility is easy to use and understand

Technical specifications:
- Implement in Python 3.8+
- Use efficient prime factorization algorithms (e.g., trial division for smaller numbers, more advanced methods for larger ones)
- Optimize for speed and memory usage
- Implement robust input validation and error handling
- Provide clear and concise usage instructions
- Ensure code is well-documented and follows PEP 8 style guidelines

Anti-requirements and pitfalls to avoid:
- Do not implement a graphical user interface
- Avoid using external libraries for the core factorization logic
- Do not attempt to factor extremely large numbers (e.g., those used in cryptography)
- Avoid overengineering; keep the implementation simple and focused on the core functionality


Create a Dockerfile for containerizing the application. Use the provided python-container.txt as a base.
Ensure the Dockerfile:
1. Uses an appropriate Python base image
2. Copies the necessary files into the container
3. Installs any required dependencies
4. Sets the entry point to run the prime factorization utility


<file path="lib:architectures/python-container.txt">
Your task is to write the Dockerfile for running the application. Start with the image below.
FROM public.ecr.aws/docker/library/alpine:3.20
Use a venv, as modern python no longer allows global pip installs.
Add execution of unit tests to the build.
Run the unit tests with "< /dev/null" to prevent input lock.

</file>

<file path="requirements.txt">

</file>

<file path="src/main.py">
#!/usr/bin/env python3

import sys
import argparse
from typing import List

from prime_factorization import prime_factorize

def parse_arguments() -> int:
    """Parse and validate command-line arguments."""
    parser = argparse.ArgumentParser(description="Prime Factorization Utility")
    parser.add_argument("number", type=int, help="Positive integer to factorize")
    args = parser.parse_args()

    if args.number <= 0:
        parser.error("Input must be a positive integer.")

    return args.number

def display_results(factors: List[int]) -> None:
    """Format and print the prime factors."""
    if not factors:
        print("The number 1 has no prime factors.")
    else:
        print("Prime factors:", " Ã— ".join(map(str, factors)))

def main() -> None:
    """Main entry point of the program."""
    try:
        number = parse_arguments()
        factors = prime_factorize(number)
        display_results(factors)
    except ValueError as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"An unexpected error occurred: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
</file>

Target file: Dockerfile

