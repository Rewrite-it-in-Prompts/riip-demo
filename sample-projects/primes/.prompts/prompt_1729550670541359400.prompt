The prime factorization utility is a command-line tool designed to find and display the prime factors of any given positive integer. Its primary purpose is to provide a quick and efficient way for users to decompose numbers into their prime components.

Key goals and requirements:
1. Accept a single positive integer as input via command-line argument
2. Calculate the prime factorization of the input number
3. Display the prime factors in ascending order, with repetition for multiple occurrences
4. Implement efficient algorithms for prime factorization
5. Handle large numbers within reasonable time constraints
6. Provide clear error messages for invalid inputs
7. Ensure the utility is easy to use and understand

Technical specifications:
- Implement in Python 3.8+
- Use efficient prime factorization algorithms (e.g., trial division for smaller numbers, more advanced methods for larger ones)
- Optimize for speed and memory usage
- Implement robust input validation and error handling
- Provide clear and concise usage instructions
- Ensure code is well-documented and follows PEP 8 style guidelines

Anti-requirements and pitfalls to avoid:
- Do not implement a graphical user interface
- Avoid using external libraries for the core factorization logic
- Do not attempt to factor extremely large numbers (e.g., those used in cryptography)
- Avoid overengineering; keep the implementation simple and focused on the core functionality


Implement unit tests for the factorization module. Test cases should cover:
1. Prime number checking
2. Prime factorization for various inputs (small, large, prime, composite)
3. Edge cases (1, 2, very large numbers)

Ensure tests can run without external dependencies or user input.


<file path="src/factorization.py">
#!/usr/bin/env python3

from typing import List
import math

def is_prime(n: int) -> bool:
    """
    Check if a number is prime.

    Args:
        n (int): The number to check.

    Returns:
        bool: True if the number is prime, False otherwise.
    """
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    return True

def trial_division(n: int) -> List[int]:
    """
    Find prime factors using trial division method.

    Args:
        n (int): The number to factorize.

    Returns:
        List[int]: List of prime factors.
    """
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n //= 2
    
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            factors.append(i)
            n //= i
    
    if n > 2:
        factors.append(n)
    
    return factors

def prime_factorize(n: int) -> List[int]:
    """
    Find the prime factors of a given number.

    Args:
        n (int): The number to factorize.

    Returns:
        List[int]: List of prime factors in ascending order.

    Raises:
        ValueError: If the input is not a positive integer.
    """
    if not isinstance(n, int) or n <= 0:
        raise ValueError("Input must be a positive integer.")
    
    if n == 1:
        return []
    
    return trial_division(n)

# Alias for compatibility with main.py
prime_factors = prime_factorize
</file>

Target file: tests/test_factorization.py

