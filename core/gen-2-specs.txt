Rewrite the above gen-1.py to generate a Python script called gen-2.py that handles multi-file code generation using LLMs. The script should:

1. Accept multiple input files or stdin as input (like gen-1.py).
2. Accept an output directory path to save generated code files (-o). 
3. Invoke the LLM with the input and generate multiple code files.
4. Save the generated files to the specified output directory.
5. Accept a "-x" command-list like gen-1, but run the subprocesses with cwd=args.output_dir.
6. Handle build-retry for multiple files.
7. Provide clear error messages and logging.

Use the same `llm_client.CodingChat` and libraries as gen-1.py. 

Multi-file generation process:
- Check for existing "architecture.yaml" in output folder. If found, log this fact, and perform the "resumption process" (see below).Otherwise, do the following:
  - Ask LLM to generate architecture.yaml describing desired architecture (format below).
  - Parse the YAML. Log to stderr. Retry up to max if parsing fails.
  - For each file in architecture.yaml filelist: 
    - If `content:` provided, write file. Else, ask LLM to generate just that file. 
    - Write out each file as received. Log to stderr before/after.
    - LLM chat is stateful, so no need to repeat prompt/descriptions.

Resumption process (if architecture.yaml exists):
- Read the contents of architecture.yaml. 
- Gather all inputs (normal process)
- Load existing output files: include only files that have the same extension as one or more target paths listed in the architecture.yaml, and exclude the following folders: target, debug, node_modules.
- Run normal -x processing. 
- Prompt LLM with:
  "{inputs}
  ---
  Evaluate the original inputs above. Here's the work that's been done so far:
  Architecture document, including pseudo-code: <architecture>{architecture}</architecture>. 
  Files generated: {files} (contains full full list of files and contents from output folder)
  Pipeline output: {stdout} {stderr} {resultcode}.
  If the pipeline was successful, please carefully review the requirements and architecture to see if anything was missed.
  Review and respond in YAML: 
  vision: ... (repeat all requirements, and add any information learned from the work already done)
  filelist: ... (optional, same as architecture.yaml, only if changes are needed, otherwise set to `[]`)
    - path: ...
      description: ... 
      content: (optional)
  Or 'filelist: []' if no changes needed."
- Take the LLM response and append it to `implementation.yaml`, preceded by a "---" separator. After this point, continue processing the same way as if the output had come from the initial architecture generation step.

architecture.yaml format:
- vision: |
  Detailed requirements, description, specifications, clarifications, anti-requirements, anti-goals, pitfalls to avoid. The vision must be extremelly detailed: only remove redundant information, keep all details.
- filelist:
    - path: ...  
      description: (contents, dependencies)
      content: (include for small files, else omit)

Fixing errors:
- Ask LLM for YAML with:
  root-cause: (analyse the root cause of the problem) 
  immediate-fix: (describe what needs to be fixed specifically now in this project)
  best-practice: (write general guidance for future developers to avoid this type of problem in other projects)
  filelist: (same format as architecture.yaml)
- Append the LLM output to "implementation.yaml" after a "---" separator.
- Parse YAML. Retry if fails.
- Process filelist like architecture.yaml.  

Ensure 'filelist' format consistency in LLM prompts and YAML parsing. Report discrepancies to LLM, retry up to max. Use 'filelist: []' for no more files.

Include YAML example in LLM prompts generating YAML.

Remember: the LLM performs at the level of a junior team member. You need to spell everything out in the prompts, every single time.

Use ultra-short symbol names to minimize token consumption. Write docstrings for every function.

# Clarification of previous misunderstandings:
- Scanning of file contents from the output folder should only be done as part of the Resumption Process, and must be done recursively into subfolders.
- Resumption Process only overrides the initial architecture step, everything else including execution, retries, and error-fixing are the same from that point forward.
- When there are no more files to process but -x was specified, proceed to normal -x execution and output step.
- The LLM cannot delete an existing file, but it can achieve the same by replacing the contents with a comment such as "this file is deliberately left blank" (lead the comment with # or // depending on file type) plus any necessary dummy definitions.
