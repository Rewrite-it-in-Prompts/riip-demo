# The specifications for "gen-2" start here.

Modify the above gen-1.py to be able to efficiently output multiple-file projects.

Specific changes requested:
- If "-t" is specified, just validate the multi-file functionality (see below for details).
- Place all generated files in a subfolder (redefines meaning of "-o").
- Ask LLM to credit all code output to "Generated by AI" and maintain a Change Log across fixes, with version numbers and no dates.

Multi-file testing mode:
- When "-t" specified, check that the multi-file prompt and parse and fix loop are all working end-to-end, and exit. 
- Do not require other parameters when -t is specified. 
- Validation must be done in two steps: 1) invoke the LLM asking it to generate "a main.go file and a helper.go file for testing purposes", and 2) parse the response to see if two files are generated and appear to be valid Golang (i.e. begins with "package").
- The llm call and the parsing must be done via re-use of the mainline code, as the goal of this test mode is to ensure correctness for the critical sections of code.

Helpful hints:
- You'll need to engineer a prompt and write specific code for parsing the multi-file LLM output.
- Leverage the stateful nature of chat.invoke() to re-request outputs that could not be parsed successfully.
- Include your own llm_client re-implementation

You must only generate a monolithic source file. Updating the config file is not allowed.

While you're at it, rewrite it as a single monolithic source file in the language of the config file below.

Use short symbol names to save on tokens.