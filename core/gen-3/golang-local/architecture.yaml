---
vision: 'Convert Python code generation tool to Golang implementation with AWS Bedrock
  integration.

  Key requirements:

  - Maintain same functionality as Python version

  - Use AWS SDK v2 with proper context handling

  - Extract all configuration to YAML files

  - Follow Go best practices and idioms

  - Break code into modular files

  - Package under cmd/gen-3

  - Include basic integration test

  - Use only specified dependencies

  '
filelist:
- path: cmd/gen-3/main.go
  description: 'Entry point that parses args and runs main logic

    '
  content: "package main\n\nimport (\n  \"flag\"\n  \"fmt\"\n  \"os\"\n)\n\nfunc main()\
    \ {\n  args := parseArgs()\n  \n  chat, err := NewCodingChat(args.configPath)\n\
    \  if err != nil {\n    fmt.Fprintf(os.Stderr, \"Error creating chat client: %v\\\
    n\", err)\n    os.Exit(1)\n  }\n\n  input, err := readInputFiles(args.inputFiles)\n\
    \  if err != nil {\n    fmt.Fprintf(os.Stderr, \"Error reading input: %v\\n\"\
    , err)\n    os.Exit(1)\n  }\n\n  generator := NewGenerator(chat, args)\n  if err\
    \ := generator.Generate(input); err != nil {\n    fmt.Fprintf(os.Stderr, \"Generation\
    \ failed: %v\\n\", err)\n    os.Exit(1)\n  }\n}\n"
- path: cmd/gen-3/args.go
  description: 'Command line argument parsing

    '
  content: "package main\n\nimport (\n  \"flag\"\n  \"strings\"\n)\n\ntype Args struct\
    \ {\n  inputFiles  []string\n  outputDir   string\n  language    string\n  execute\
    \     []string\n  maxRetries  int\n  configPath  string\n}\n\nfunc parseArgs()\
    \ *Args {\n  outputDir := flag.String(\"o\", \"\", \"Output directory path\")\n\
    \  language := flag.String(\"l\", \"python\", \"Primary language hint\")\n  maxRetries\
    \ := flag.Int(\"n\", 1, \"Max retries on failure\")\n  configPath := flag.String(\"\
    c\", \"prompt_config.yaml\", \"Path to config file\")\n  \n  var execCmds string\n\
    \  flag.StringVar(&execCmds, \"x\", \"\", \"Commands to execute after generation\
    \ (comma-separated)\")\n\n  flag.Parse()\n\n  if *outputDir == \"\" {\n    flag.Usage()\n\
    \    os.Exit(1)\n  }\n\n  var execute []string\n  if execCmds != \"\" {\n    execute\
    \ = strings.Split(execCmds, \",\")\n  }\n\n  return &Args{\n    inputFiles: flag.Args(),\n\
    \    outputDir: *outputDir,\n    language: *language,\n    execute: execute,\n\
    \    maxRetries: *maxRetries,\n    configPath: *configPath,\n  }\n}\n"
- path: cmd/gen-3/types.go
  description: 'Common type definitions

    '
  content: "package main\n\ntype Message struct {\n  Role    string `json:\"role\"\
    `\n  Content string `json:\"content\"`\n}\n\ntype Config struct {\n  Models  \
    \      []string  `yaml:\"models\"`\n  DefaultModel  int       `yaml:\"default_model\"\
    `\n  BasePrompt    []Message `yaml:\"base_prompt\"`\n  Templates     struct {\n\
    \    SystemPrompts map[string]string `yaml:\"system_prompts\"`\n    UserPrompts\
    \   map[string]string `yaml:\"user_prompts\"`\n  } `yaml:\"templates\"`\n  AWS\
    \ struct {\n    Region        string `yaml:\"region\"`\n    ReadTimeout   int\
    \    `yaml:\"read_timeout\"`\n    ConnectTimeout int   `yaml:\"connect_timeout\"\
    `\n  } `yaml:\"aws\"`\n}\n\ntype Architecture struct {\n  Vision   string    \
    \ `yaml:\"vision\"`\n  FileList []FileInfo `yaml:\"filelist\"`\n}\n\ntype FileInfo\
    \ struct {\n  Path        string `yaml:\"path\"`\n  Description string `yaml:\"\
    description\"`\n  Content     string `yaml:\"content,omitempty\"`\n}\n\ntype Implementation\
    \ struct {\n  Notes    string     `yaml:\"implementation-notes\"`\n  FileList\
    \ []FileInfo `yaml:\"filelist\"`\n}\n"
- path: cmd/gen-3/chat.go
  description: 'LLM chat client implementation

    '
  content: "package main\n\nimport (\n  \"context\"\n  \"encoding/json\"\n  \"fmt\"\
    \n  \"os\"\n  \"path/filepath\"\n  \"time\"\n\n  \"github.com/aws/aws-sdk-go-v2/service/bedrockruntime\"\
    \n  \"gopkg.in/yaml.v3\"\n)\n\ntype CodingChat struct {\n  messages []Message\n\
    \  model    string\n  session  string\n  client   *bedrockruntime.Client\n  config\
    \   *Config\n}\n\nfunc NewCodingChat(configPath string) (*CodingChat, error) {\n\
    \  config, err := loadConfig(configPath)\n  if err != nil {\n    return nil, err\n\
    \  }\n\n  client, err := newBedrockClient(config)\n  if err != nil {\n    return\
    \ nil, err\n  }\n\n  session := fmt.Sprintf(\"%s/%s\", \n    time.Now().Format(\"\
    2006-01-02/15_04\"),\n    generateSessionID())\n\n  return &CodingChat{\n    messages:\
    \ config.BasePrompt,\n    model:    config.Models[config.DefaultModel],\n    session:\
    \  session,\n    client:   client,\n    config:   config,\n  }, nil\n}\n\nfunc\
    \ (c *CodingChat) Invoke(ctx context.Context, userPrompt, fileType, systemPrompt\
    \ string) (string, error) {\n  if systemPrompt == \"\" {\n    var ok bool\n  \
    \  systemPrompt, ok = c.config.Templates.SystemPrompts[fileType]\n    if !ok {\n\
    \      systemPrompt = c.config.Templates.SystemPrompts[\"default\"]\n    }\n \
    \ }\n\n  c.messages = append(c.messages, Message{\n    Role:    \"user\",\n  \
    \  Content: userPrompt,\n  })\n\n  input := struct {\n    Messages []Message `json:\"\
    messages\"`\n    System  string    `json:\"system\"`\n  }{\n    Messages: c.messages,\n\
    \    System:   systemPrompt,\n  }\n\n  payload, err := json.Marshal(input)\n \
    \ if err != nil {\n    return \"\", err\n  }\n\n  resp, err := c.client.InvokeModel(ctx,\
    \ &bedrockruntime.InvokeModelInput{\n    ModelId: &c.model,\n    Body:    payload,\n\
    \  })\n  if err != nil {\n    return \"\", err\n  }\n\n  var result struct {\n\
    \    Content []struct {\n      Text string `json:\"text\"`\n    } `json:\"content\"\
    `\n  }\n  if err := json.Unmarshal(resp.Body, &result); err != nil {\n    return\
    \ \"\", err\n  }\n\n  content := result.Content[0].Text\n  c.messages = append(c.messages,\
    \ Message{\n    Role:    \"assistant\",\n    Content: content,\n  })\n\n  return\
    \ content, nil\n}\n"
- path: cmd/gen-3/generator.go
  description: 'Main code generation logic

    '
  content: "package main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"os\"\n  \"path/filepath\"\
    \n\n  \"gopkg.in/yaml.v3\"\n)\n\ntype Generator struct {\n  chat   *CodingChat\n\
    \  args   *Args\n}\n\nfunc NewGenerator(chat *CodingChat, args *Args) *Generator\
    \ {\n  return &Generator{\n    chat: chat,\n    args: args,\n  }\n}\n\nfunc (g\
    \ *Generator) Generate(input string) error {\n  ctx := context.Background()\n\
    \  \n  archPath := filepath.Join(g.args.outputDir, \"architecture.yaml\")\n  implPath\
    \ := filepath.Join(g.args.outputDir, \"implementation.yaml\")\n\n  var arch Architecture\n\
    \  if _, err := os.Stat(archPath); err == nil {\n    arch, err = g.resumeProject(ctx,\
    \ archPath, input, \"\")\n    if err != nil {\n      return err\n    }\n  } else\
    \ {\n    arch, err = g.getArchitecture(ctx, input)\n    if err != nil {\n    \
    \  return err\n    }\n    if err := writeYAML(archPath, arch); err != nil {\n\
    \      return err\n    }\n  }\n\n  retryCount := 0\n  for retryCount <= g.args.maxRetries\
    \ {\n    if err := g.processArchitecture(ctx, arch); err != nil {\n      return\
    \ err\n    }\n\n    if len(g.args.execute) == 0 {\n      return nil\n    }\n\n\
    \    success, output, err := executeCommands(g.args.execute, g.args.outputDir)\n\
    \    if err != nil {\n      return err\n    }\n\n    if success {\n      fmt.Println(output)\n\
    \      return nil\n    }\n\n    fixes, err := g.fixErrors(ctx, output)\n    if\
    \ err != nil {\n      return err\n    }\n\n    if err := writeYAML(implPath, fixes);\
    \ err != nil {\n      return err\n    }\n\n    arch.FileList = fixes.FileList\n\
    \    retryCount++\n  }\n\n  return fmt.Errorf(\"max retries exceeded\")\n}\n"
- path: cmd/gen-3/prompt_config.yaml
  description: 'Configuration file containing all prompts and settings

    '
  content: "models:\n  - \"anthropic.claude-3-haiku-20240307-v1:0\"\n  - \"anthropic.claude-3-5-sonnet-20241022-v2:0\"\
    \n  - \"anthropic.claude-3-opus-20240229-v1:0\"\ndefault_model: 1\n\nbase_prompt:\n\
    \  - role: \"user\"\n    content: \"From now on, always answer without any markdown\
    \ or commentary. What's 2+2?\"\n  - role: \"assistant\" \n    content: \"4\"\n\
    \ntemplates:\n  system_prompts:\n    default: \"You are an expert developer. You\
    \ deliver complete solutions without placeholders.\"\n    yaml: \"Generate output\
    \ in strict YAML format following the example structure.\"\n    \n  user_prompts:\n\
    \    architecture: |\n      Based on this input, generate architecture YAML:\n\
    \      %s\n    error_fix: |\n      Fix this error:\n      %s\n    file_gen: |\n\
    \      Generate file: %s\n      Description: %s\n      Project vision: %s\n\n\
    aws:\n  region: \"us-west-2\"\n  read_timeout: 600\n  connect_timeout: 300\n"
- path: cmd/gen-3/main_test.go
  description: 'Basic integration test

    '
  content: "package main\n\nimport (\n  \"os\"\n  \"path/filepath\"\n  \"testing\"\
    \n)\n\nfunc TestBasicGeneration(t *testing.T) {\n  tmpDir, err := os.MkdirTemp(\"\
    \", \"gen3-test-*\")\n  if err != nil {\n    t.Fatal(err)\n  }\n  defer os.RemoveAll(tmpDir)\n\
    \n  input := `package main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"\
    Hello\")\n}`\n\n  inputFile := filepath.Join(tmpDir, \"input.go\")\n  if err :=\
    \ os.WriteFile(inputFile, []byte(input), 0644); err != nil {\n    t.Fatal(err)\n\
    \  }\n\n  outputDir := filepath.Join(tmpDir, \"output\")\n  args := &Args{\n \
    \   inputFiles: []string{inputFile},\n    outputDir:  outputDir,\n    language:\
    \   \"go\",\n    maxRetries: 1,\n    configPath: \"prompt_config.yaml\",\n  }\n\
    \n  chat, err := NewCodingChat(args.configPath)\n  if err != nil {\n    t.Fatal(err)\n\
    \  }\n\n  generator := NewGenerator(chat, args)\n  inputContent, err := readInputFiles(args.inputFiles)\n\
    \  if err != nil {\n    t.Fatal(err)\n  }\n\n  if err := generator.Generate(inputContent);\
    \ err != nil {\n    t.Fatal(err)\n  }\n\n  if _, err := os.Stat(filepath.Join(outputDir,\
    \ \"architecture.yaml\")); err != nil {\n    t.Error(\"architecture.yaml not created\"\
    )\n  }\n}"
